// <auto-generated />
using System;
using BaseClass_dll.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BaseClass_dll.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250802075510_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BaseClass_dll.BaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BaseEntities");

                    b.HasDiscriminator().HasValue("BaseEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BaseClass_dll.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BaseClass_dll.AcademyClass", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AcademyClass");
                });

            modelBuilder.Entity("BaseClass_dll.AdmitCard", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("AdmitCardPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("StudentId")
                                .HasColumnName("AdmitCard_StudentId");
                        });

                    b.HasDiscriminator().HasValue("AdmitCard");
                });

            modelBuilder.Entity("BaseClass_dll.Attendance", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasIndex("StudentId");

                    b.HasDiscriminator().HasValue("Attendance");
                });

            modelBuilder.Entity("BaseClass_dll.Branch", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HeadOffice")
                        .HasColumnType("bit");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasIndex("SchoolId");

                    b.HasDiscriminator().HasValue("Branch");
                });

            modelBuilder.Entity("BaseClass_dll.ClassSubject", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("AcademyClassId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasIndex("AcademyClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.HasDiscriminator().HasValue("ClassSubject");
                });

            modelBuilder.Entity("BaseClass_dll.Event", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetAudience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Event");
                });

            modelBuilder.Entity("BaseClass_dll.EventImage", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("EventId");

                    b.HasDiscriminator().HasValue("EventImage");
                });

            modelBuilder.Entity("BaseClass_dll.Exam", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("Exam_Name");
                        });

                    b.HasDiscriminator().HasValue("Exam");
                });

            modelBuilder.Entity("BaseClass_dll.ExamRoutine", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("AcademyClassId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasIndex("AcademyClassId");

                    b.HasIndex("ExamId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("AcademyClassId")
                                .HasColumnName("ExamRoutine_AcademyClassId");

                            t.Property("ExamId")
                                .HasColumnName("ExamRoutine_ExamId");

                            t.Property("SubjectId")
                                .HasColumnName("ExamRoutine_SubjectId");
                        });

                    b.HasDiscriminator().HasValue("ExamRoutine");
                });

            modelBuilder.Entity("BaseClass_dll.Fee", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("AcademyClassId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AcademyClassId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("AcademyClassId")
                                .HasColumnName("Fee_AcademyClassId");
                        });

                    b.HasDiscriminator().HasValue("Fee");
                });

            modelBuilder.Entity("BaseClass_dll.FeePayment", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("FeeStructureId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FeeStructureId");

                    b.HasIndex("StudentId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("StudentId")
                                .HasColumnName("FeePayment_StudentId");
                        });

                    b.HasDiscriminator().HasValue("FeePayment");
                });

            modelBuilder.Entity("BaseClass_dll.FeeStructure", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("AcademyClassId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FeeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AcademyClassId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("AcademyClassId")
                                .HasColumnName("FeeStructure_AcademyClassId");

                            t.Property("Amount")
                                .HasColumnName("FeeStructure_Amount");
                        });

                    b.HasDiscriminator().HasValue("FeeStructure");
                });

            modelBuilder.Entity("BaseClass_dll.Feedback", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("Feedback");
                });

            modelBuilder.Entity("BaseClass_dll.Homework", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("AcademyClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AcademyClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("AcademyClassId")
                                .HasColumnName("Homework_AcademyClassId");

                            t.Property("Description")
                                .HasColumnName("Homework_Description");

                            t.Property("SubjectId")
                                .HasColumnName("Homework_SubjectId");

                            t.Property("TeacherId")
                                .HasColumnName("Homework_TeacherId");

                            t.Property("Title")
                                .HasColumnName("Homework_Title");
                        });

                    b.HasDiscriminator().HasValue("Homework");
                });

            modelBuilder.Entity("BaseClass_dll.HomeworkSubmission", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeworkId")
                        .HasColumnType("int");

                    b.Property<string>("IFromFilePaths")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("HomeworkId");

                    b.HasIndex("StudentId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("StudentId")
                                .HasColumnName("HomeworkSubmission_StudentId");
                        });

                    b.HasDiscriminator().HasValue("HomeworkSubmission");
                });

            modelBuilder.Entity("BaseClass_dll.IDCard", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("IDCardPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PrintCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("IssuedDate")
                                .HasColumnName("IDCard_IssuedDate");

                            t.Property("UserId")
                                .HasColumnName("IDCard_UserId");
                        });

                    b.HasDiscriminator().HasValue("IDCard");
                });

            modelBuilder.Entity("BaseClass_dll.LeaveRequest", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSalaryDeducted")
                        .HasColumnType("bit");

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("StaffId");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("EndDate")
                                .HasColumnName("LeaveRequest_EndDate");

                            t.Property("StartDate")
                                .HasColumnName("LeaveRequest_StartDate");

                            t.Property("UserId")
                                .HasColumnName("LeaveRequest_UserId");
                        });

                    b.HasDiscriminator().HasValue("LeaveRequest");
                });

            modelBuilder.Entity("BaseClass_dll.Message", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverUserId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.HasDiscriminator().HasValue("Message");
                });

            modelBuilder.Entity("BaseClass_dll.Notice", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TargetAudience")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Body")
                                .HasColumnName("Notice_Body");

                            t.Property("TargetAudience")
                                .HasColumnName("Notice_TargetAudience");

                            t.Property("Title")
                                .HasColumnName("Notice_Title");
                        });

                    b.HasDiscriminator().HasValue("Notice");
                });

            modelBuilder.Entity("BaseClass_dll.Notification", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Message")
                                .HasColumnName("Notification_Message");

                            t.Property("UserId")
                                .HasColumnName("Notification_UserId");
                        });

                    b.HasDiscriminator().HasValue("Notification");
                });

            modelBuilder.Entity("BaseClass_dll.Parent", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("Parent_Address");

                            t.Property("UserId")
                                .HasColumnName("Parent_UserId");
                        });

                    b.HasDiscriminator().HasValue("Parent");
                });

            modelBuilder.Entity("BaseClass_dll.Result", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<double>("GPA")
                        .HasColumnType("float");

                    b.Property<double>("MarksObtained")
                        .HasColumnType("float");

                    b.Property<double>("PassMarks")
                        .HasColumnType("float");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<double>("TotalMarks")
                        .HasColumnType("float");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("ExamId")
                                .HasColumnName("Result_ExamId");

                            t.Property("StudentId")
                                .HasColumnName("Result_StudentId");

                            t.Property("SubjectId")
                                .HasColumnName("Result_SubjectId");
                        });

                    b.HasDiscriminator().HasValue("Result");
                });

            modelBuilder.Entity("BaseClass_dll.Salary", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<decimal>("Allowance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Bonus")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LeaveDeduction")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("OvertimeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PermittedLeaveDays")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxDeduction")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalLeaveDays")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("PaymentDate")
                                .HasColumnName("Salary_PaymentDate");

                            t.Property("PaymentMethod")
                                .HasColumnName("Salary_PaymentMethod");

                            t.Property("UserId")
                                .HasColumnName("Salary_UserId");
                        });

                    b.HasDiscriminator().HasValue("Salary");
                });

            modelBuilder.Entity("BaseClass_dll.School", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Address")
                                .HasColumnName("School_Address");

                            t.Property("Name")
                                .HasColumnName("School_Name");
                        });

                    b.HasDiscriminator().HasValue("School");
                });

            modelBuilder.Entity("BaseClass_dll.SchoolClass", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("AcademyClassId")
                        .HasColumnType("int");

                    b.Property<string>("CustomName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasIndex("AcademyClassId");

                    b.HasIndex("SchoolId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("AcademyClassId")
                                .HasColumnName("SchoolClass_AcademyClassId");

                            t.Property("SchoolId")
                                .HasColumnName("SchoolClass_SchoolId");
                        });

                    b.HasDiscriminator().HasValue("SchoolClass");
                });

            modelBuilder.Entity("BaseClass_dll.SchoolClassSubject", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("SchoolClassId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasIndex("SchoolClassId");

                    b.HasIndex("SubjectId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("SubjectId")
                                .HasColumnName("SchoolClassSubject_SubjectId");
                        });

                    b.HasDiscriminator().HasValue("SchoolClassSubject");
                });

            modelBuilder.Entity("BaseClass_dll.Section", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("AcademyClassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("AcademyClassId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("AcademyClassId")
                                .HasColumnName("Section_AcademyClassId");

                            t.Property("Name")
                                .HasColumnName("Section_Name");
                        });

                    b.HasDiscriminator().HasValue("Section");
                });

            modelBuilder.Entity("BaseClass_dll.Staff", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("UserId")
                                .HasColumnName("Staff_UserId");
                        });

                    b.HasDiscriminator().HasValue("Staff");
                });

            modelBuilder.Entity("BaseClass_dll.StaffAttendance", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasIndex("StaffId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("StaffAttendance_Date");

                            t.Property("IsPresent")
                                .HasColumnName("StaffAttendance_IsPresent");

                            t.Property("StaffId")
                                .HasColumnName("StaffAttendance_StaffId");
                        });

                    b.HasDiscriminator().HasValue("StaffAttendance");
                });

            modelBuilder.Entity("BaseClass_dll.Student", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("AcademyClassId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousSchool")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("AcademyClassId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SectionId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("AcademyClassId")
                                .HasColumnName("Student_AcademyClassId");

                            t.Property("Address")
                                .HasColumnName("Student_Address");

                            t.Property("PhotoPath")
                                .HasColumnName("Student_PhotoPath");

                            t.Property("SectionId")
                                .HasColumnName("Student_SectionId");

                            t.Property("UserId")
                                .HasColumnName("Student_UserId");
                        });

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("BaseClass_dll.Subject", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("Subject_Name");
                        });

                    b.HasDiscriminator().HasValue("Subject");
                });

            modelBuilder.Entity("BaseClass_dll.SubstituteAssignment", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("AbsentTeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubstituteTeacherId")
                        .HasColumnType("int");

                    b.Property<int>("TimetableEntryId")
                        .HasColumnType("int");

                    b.HasIndex("AbsentTeacherId");

                    b.HasIndex("SubstituteTeacherId");

                    b.HasIndex("TimetableEntryId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Date")
                                .HasColumnName("SubstituteAssignment_Date");
                        });

                    b.HasDiscriminator().HasValue("SubstituteAssignment");
                });

            modelBuilder.Entity("BaseClass_dll.Teacher", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NIDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Designation")
                                .HasColumnName("Teacher_Designation");

                            t.Property("NIDNumber")
                                .HasColumnName("Teacher_NIDNumber");

                            t.Property("PhotoPath")
                                .HasColumnName("Teacher_PhotoPath");

                            t.Property("UserId")
                                .HasColumnName("Teacher_UserId");
                        });

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("BaseClass_dll.TimetableEntry", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<int>("AcademyClassId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasIndex("AcademyClassId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("AcademyClassId")
                                .HasColumnName("TimetableEntry_AcademyClassId");

                            t.Property("EndTime")
                                .HasColumnName("TimetableEntry_EndTime");

                            t.Property("SectionId")
                                .HasColumnName("TimetableEntry_SectionId");

                            t.Property("StartTime")
                                .HasColumnName("TimetableEntry_StartTime");

                            t.Property("SubjectId")
                                .HasColumnName("TimetableEntry_SubjectId");

                            t.Property("TeacherId")
                                .HasColumnName("TimetableEntry_TeacherId");
                        });

                    b.HasDiscriminator().HasValue("TimetableEntry");
                });

            modelBuilder.Entity("BaseClass_dll.Transaction", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("Amount")
                                .HasColumnName("Transaction_Amount");

                            t.Property("Category")
                                .HasColumnName("Transaction_Category");

                            t.Property("Date")
                                .HasColumnName("Transaction_Date");

                            t.Property("Description")
                                .HasColumnName("Transaction_Description");
                        });

                    b.HasDiscriminator().HasValue("Transaction");
                });

            modelBuilder.Entity("BaseClass_dll.User", b =>
                {
                    b.HasBaseType("BaseClass_dll.BaseEntity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BaseEntities", t =>
                        {
                            t.Property("CreatedAt")
                                .HasColumnName("User_CreatedAt");
                        });

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BaseClass_dll.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BaseClass_dll.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BaseClass_dll.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BaseClass_dll.AdmitCard", b =>
                {
                    b.HasOne("BaseClass_dll.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BaseClass_dll.Attendance", b =>
                {
                    b.HasOne("BaseClass_dll.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BaseClass_dll.Branch", b =>
                {
                    b.HasOne("BaseClass_dll.School", "School")
                        .WithMany("Branches")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("BaseClass_dll.ClassSubject", b =>
                {
                    b.HasOne("BaseClass_dll.AcademyClass", "AcademyClass")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("AcademyClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Teacher", "Teacher")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyClass");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BaseClass_dll.EventImage", b =>
                {
                    b.HasOne("BaseClass_dll.Event", "Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("BaseClass_dll.ExamRoutine", b =>
                {
                    b.HasOne("BaseClass_dll.AcademyClass", "AcademyClass")
                        .WithMany()
                        .HasForeignKey("AcademyClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyClass");

                    b.Navigation("Exam");

                    b.Navigation("Section");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BaseClass_dll.Fee", b =>
                {
                    b.HasOne("BaseClass_dll.AcademyClass", "AcademyClass")
                        .WithMany()
                        .HasForeignKey("AcademyClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyClass");
                });

            modelBuilder.Entity("BaseClass_dll.FeePayment", b =>
                {
                    b.HasOne("BaseClass_dll.FeeStructure", "FeeStructure")
                        .WithMany()
                        .HasForeignKey("FeeStructureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Student", "Student")
                        .WithMany("FeePayments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeStructure");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BaseClass_dll.FeeStructure", b =>
                {
                    b.HasOne("BaseClass_dll.AcademyClass", "AcademyClass")
                        .WithMany()
                        .HasForeignKey("AcademyClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyClass");
                });

            modelBuilder.Entity("BaseClass_dll.Feedback", b =>
                {
                    b.HasOne("BaseClass_dll.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseClass_dll.Homework", b =>
                {
                    b.HasOne("BaseClass_dll.AcademyClass", "AcademyClass")
                        .WithMany()
                        .HasForeignKey("AcademyClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyClass");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BaseClass_dll.HomeworkSubmission", b =>
                {
                    b.HasOne("BaseClass_dll.Homework", "Homework")
                        .WithMany("Submissions")
                        .HasForeignKey("HomeworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Student", "Student")
                        .WithMany("HomeworkSubmissions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Homework");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BaseClass_dll.IDCard", b =>
                {
                    b.HasOne("BaseClass_dll.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseClass_dll.LeaveRequest", b =>
                {
                    b.HasOne("BaseClass_dll.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("BaseClass_dll.Staff", null)
                        .WithMany("LeaveRequests")
                        .HasForeignKey("StaffId");

                    b.HasOne("BaseClass_dll.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseClass_dll.Message", b =>
                {
                    b.HasOne("BaseClass_dll.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BaseClass_dll.Notification", b =>
                {
                    b.HasOne("BaseClass_dll.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseClass_dll.Parent", b =>
                {
                    b.HasOne("BaseClass_dll.User", "User")
                        .WithOne("Parent")
                        .HasForeignKey("BaseClass_dll.Parent", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseClass_dll.Result", b =>
                {
                    b.HasOne("BaseClass_dll.Exam", "Exam")
                        .WithMany()
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Student", "Student")
                        .WithMany("Results")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BaseClass_dll.Salary", b =>
                {
                    b.HasOne("BaseClass_dll.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseClass_dll.SchoolClass", b =>
                {
                    b.HasOne("BaseClass_dll.AcademyClass", "AcademyClass")
                        .WithMany("SchoolClasses")
                        .HasForeignKey("AcademyClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.School", "School")
                        .WithMany("SchoolClasses")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyClass");

                    b.Navigation("School");
                });

            modelBuilder.Entity("BaseClass_dll.SchoolClassSubject", b =>
                {
                    b.HasOne("BaseClass_dll.SchoolClass", "SchoolClass")
                        .WithMany("SchoolClassSubjects")
                        .HasForeignKey("SchoolClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Subject", "Subject")
                        .WithMany("SchoolClassSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchoolClass");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("BaseClass_dll.Section", b =>
                {
                    b.HasOne("BaseClass_dll.AcademyClass", "AcademyClass")
                        .WithMany("Sections")
                        .HasForeignKey("AcademyClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyClass");
                });

            modelBuilder.Entity("BaseClass_dll.Staff", b =>
                {
                    b.HasOne("BaseClass_dll.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseClass_dll.StaffAttendance", b =>
                {
                    b.HasOne("BaseClass_dll.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BaseClass_dll.Student", b =>
                {
                    b.HasOne("BaseClass_dll.AcademyClass", "AcademyClass")
                        .WithMany()
                        .HasForeignKey("AcademyClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Parent", null)
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.HasOne("BaseClass_dll.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("BaseClass_dll.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyClass");

                    b.Navigation("Section");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseClass_dll.SubstituteAssignment", b =>
                {
                    b.HasOne("BaseClass_dll.Teacher", "AbsentTeacher")
                        .WithMany()
                        .HasForeignKey("AbsentTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Teacher", "SubstituteTeacher")
                        .WithMany()
                        .HasForeignKey("SubstituteTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.TimetableEntry", "TimetableEntry")
                        .WithMany()
                        .HasForeignKey("TimetableEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbsentTeacher");

                    b.Navigation("SubstituteTeacher");

                    b.Navigation("TimetableEntry");
                });

            modelBuilder.Entity("BaseClass_dll.Teacher", b =>
                {
                    b.HasOne("BaseClass_dll.User", "User")
                        .WithOne("Teacher")
                        .HasForeignKey("BaseClass_dll.Teacher", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseClass_dll.TimetableEntry", b =>
                {
                    b.HasOne("BaseClass_dll.AcademyClass", "AcademyClass")
                        .WithMany()
                        .HasForeignKey("AcademyClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseClass_dll.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademyClass");

                    b.Navigation("Section");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BaseClass_dll.AcademyClass", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("SchoolClasses");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("BaseClass_dll.Event", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("BaseClass_dll.Homework", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("BaseClass_dll.Parent", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("BaseClass_dll.School", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("SchoolClasses");
                });

            modelBuilder.Entity("BaseClass_dll.SchoolClass", b =>
                {
                    b.Navigation("SchoolClassSubjects");
                });

            modelBuilder.Entity("BaseClass_dll.Staff", b =>
                {
                    b.Navigation("LeaveRequests");
                });

            modelBuilder.Entity("BaseClass_dll.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("FeePayments");

                    b.Navigation("HomeworkSubmissions");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("BaseClass_dll.Subject", b =>
                {
                    b.Navigation("SchoolClassSubjects");
                });

            modelBuilder.Entity("BaseClass_dll.Teacher", b =>
                {
                    b.Navigation("ClassSubjects");
                });

            modelBuilder.Entity("BaseClass_dll.User", b =>
                {
                    b.Navigation("Parent");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });
#pragma warning restore 612, 618
        }
    }
}
